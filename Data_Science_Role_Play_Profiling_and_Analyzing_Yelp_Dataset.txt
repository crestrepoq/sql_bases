Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

--------------------------------------------------------------------------------------------------
/*
For getting the total number of records oh each table I use two queries to verify:

SELECT count(*)
FROM friend

SELECT friend_id
FROM friend

In both ways for each table and in both cases each tables contains exactly 10000 records
/*
--------------------------------------------------------------------------------------------------

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = distinct(id): 10000
ii. Hours = distinct(business_id): 1562, distinct(hours): 2052
iii. Category = distinct(business_id):2643, distinct(category): 712
iv. Attribute = distinct(business_id): 1115
v. Review = distinct(id):10000, distinct(business_id):8090, distinct(user_id):9581
vi. Checkin = distinct(business_id): 493
vii. Photo = distinct(id): 10000, distinct(business_id): 6493
viii. Tip = distinct(user_id): 537,
ix. User = distinct(business_id): 3979
x. Friend = distinct(user_id): 11
xi. Elite_years = distinct(user_id): 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

--------------------------------------------------------------------------------------------------
/*
For getting the DISTINCT records of tables request I used this query for eachone:
SELECT count(distinct(id))
FROM Business
/*
--------------------------------------------------------------------------------------------------


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no."
	
	
	SQL code used to arrive at answer:
	
SELECT count(*)
FROM user
/*Check if there are null values in any of the columns*/
WHERE id IS NULL
    OR name IS NULL
    OR review_count IS NULL
    OR yelping_since IS NULL
    OR useful IS NULL
    OR funny IS NULL
    OR cool IS NULL
    OR fans IS NULL
    OR average_stars IS NULL
    OR compliment_hot IS NULL
    OR compliment_more IS NULL
    OR compliment_profile IS NULL
    OR compliment_cute IS NULL
    OR compliment_list IS NULL
    OR compliment_note IS NULL
    OR compliment_plain IS NULL
    OR compliment_cool IS NULL
    OR compliment_funny IS NULL
    OR compliment_writer IS NULL
    OR compliment_photos IS NULL
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0  avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995

--------------------------------------------------------------------------------------------------
/*
For getting the min, max and avg values for tables request I used this query for eachone:
SELECT min(review_count),max(review_count),avg(review_count)
FROM user
/*
--------------------------------------------------------------------------------------------------

		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT b.city, count(b.city) AS num_reviews
FROM review r
/*Left join with business table to get cities. First review and the business for take just cities that have reviews*/
LEFT JOIN business b
    ON b.id = r.business_id
/*Verify that we are not taking null values in query*/ 
WHERE r.stars IS NOT NULL
GROUP BY b.city
ORDER BY num_reviews DESC	
	
	Copy and Paste the Result Below:
	+-----------------+-------------+
    | city            | num_reviews |
    +-----------------+-------------+
    | Las Vegas       |         193 |
    | Phoenix         |          65 |
    | Toronto         |          51 |
    | Scottsdale      |          37 |
    | Henderson       |          30 |
    | Tempe           |          28 |
    | Pittsburgh      |          23 |
    | Chandler        |          22 |
    | Charlotte       |          21 |
    | Montréal        |          18 |
    | Madison         |          16 |
    | Gilbert         |          13 |
    | Mesa            |          13 |
    | Cleveland       |          12 |
    | North Las Vegas |           6 |
    | Edinburgh       |           5 |
    | Glendale        |           5 |
    | Lakewood        |           5 |
    | Cave Creek      |           4 |
    | Champaign       |           4 |
    | Markham         |           4 |
    | North York      |           4 |
    | Mississauga     |           3 |
    | Surprise        |           3 |
    | Avondale        |           2 |
    +-----------------+-------------+   
    (Output limit exceeded, 25 of 68 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT r.stars AS Stars_rating, COUNT(*)
FROM business b
/* I made the join with left table business and right table reviews because I test and Avon did not  have reviews so in this way I get the value none for that*/
LEFT JOIN review r
    ON b.id = r.business_id
WHERE b.city like 'Avon'
GROUP BY Stars_rating

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
    +------+--------------+----------+
    | city | Stars_rating | COUNT(*) |
    +------+--------------+----------+
    | Avon |         None |       10 |
    +------+--------------+----------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT r.stars AS Stars_rating, COUNT(*)
FROM business b
LEFT JOIN review r
    ON b.id = r.business_id
WHERE b.city like 'Beachwood'
GROUP BY Stars_rating


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-----------+--------------+----------+
| city      | Stars_rating | COUNT(*) |
+-----------+--------------+----------+
| Beachwood |         None |       13 |
| Beachwood |            3 |        1 |
+-----------+--------------+----------+


7. Find the top 3 users based on their total number of reviews:
		
SQL code used to arrive at answer:
SELECT u.id,u.name,COUNT(*) AS num_reviews
FROM review r
LEFT JOIN user u
    ON u.id = r.user_id
WHERE r.stars IS NOT NULL
    AND u.name IS NOT NULL
GROUP BY u.id
ORDER BY num_reviews DESC
LIMIT 3	
		
	Copy and Paste the Result Below:

+------------------------+-----------+-------------+
| id                     | name      | num_reviews |
+------------------------+-----------+-------------+
| -0udWcFQEt2M8kM3xcIofw | Kaitlan   |           2 |
| -Biq3Dt8YhkRJEO_ITrvww | Christina |           2 |
| -l4iRZ2wYow39RTevk21Dg | Craig     |           2 |
+------------------------+-----------+-------------+
		

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

    I found that exist more than 9928 reviews not correlate to a specific user, so it is likely that much more fans had reviewed but they do not identifyed themself when did it
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

SELECT filter.category,count(category)
/*I made a substring doing a CASE for categorize text review among these that have 'love', 'hate' o none of both words*/
SELECT filter.category as category,count(category) num_mentions
FROM (SELECT id
    ,CASE
        WHEN text like '%love%' THEN 'love'
        WHEN text like '%hate%' THEN 'hate'
    ELSE 'other'
    END category
    FROM review) AS filter
WHERE filter.category NOT IN ('other')
GROUP BY filter.category
	
	SQL code used to arrive at answer:

+----------+--------------+
| category | num_mentions |
+----------+--------------+
| hate     |          178 |
| love     |         1780 |
+----------+--------------+	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT id,name,fans
FROM user
ORDER BY fans DESC
LIMIT 10
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

No, in this case I choose Las Vegas city and Category Restaurants and it have same distribution hours for business activity

ii. Do the two groups you chose to analyze have a different number of reviews?
         
No, I tryed even with distinct function and in both cases they have same number of reviews

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No, using just the variables I choose (city, schedule, num_reviews) I cannot infer anything for example for understanding why people have differents reviews values. Maybe I have to try with other variables to do this.

SQL code used for analysis:

SELECT r.stars
    ,CASE
        WHEN r.stars > 3 THEN 'Good rate'
        WHEN r.stars <= 3 AND r.stars > 1 THEN 'Bad rate'
        ELSE 'Other'
    END valuation
    ,b.city
    ,replace(SUBSTR(h.hours,-11),"|","")AS schedule
    ,count(r.id) AS num_valorations
FROM review r
LEFT JOIN business b
    ON b.id = r.business_id
LEFT JOIN category c
    ON b.id = c.business_id
LEFT JOIN hours h
    ON b.id = h.business_id
WHERE h.hours is not null
    AND b.city = 'Las Vegas'
    AND c.category = 'Restaurants'
GROUP BY r.stars
ORDER BY h.hours DESC

RESULT:

+-------+-----------+-----------+-------------+-----------------+
| stars | valuation | city      | schedule    | num_valorations |
+-------+-----------+-----------+-------------+-----------------+
|     4 | Good rate | Las Vegas | 10:00-23:00 |               7 |
|     5 | Good rate | Las Vegas | 10:00-23:00 |               7 |
+-------+-----------+-----------+-------------+-----------------+
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

As I hope, when a business is close it have less num of reviews against these business that are open, it is a significant difference from more than 230 thousand numbers of reviews
         
ii. Difference 2:
         
Although maybe it is not too big differece, in average, when a business is open has more likely to get better rating valoration than close businesses, is nearly two points ratio difference from 3.5 for close ones to almost 3.7 for open ones
         
SQL code used for analysis:

SELECT b.is_open,sum(b.review_count) num_review_count,avg(b.stars) avg_rating
FROM business b
GROUP BY b.is_open

RESULT: 
+---------+------------------+---------------+
| is_open | num_review_count |    avg_rating |
+---------+------------------+---------------+
|       0 |            35261 | 3.52039473684 |
|       1 |           269300 | 3.67900943396 |
+---------+------------------+---------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
I choose a cluster and predicting analysis for undestanding the kind of business vs value rating

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

For do this I will need differents valriables that give me some information to understand changes among for examples cities, historical valoration, schedule of activity and undestanding the influences of week days vs weekend days and all of these among categories, what implies if you take one specific category for anayzing these points? With all these elements I can group business with clustering analysis and even predict future valoration rating if business apply changes in schedules, days of work, or even cities to get into                         
                  
iii. Output of your finished dataset:

+------------------------+------------------+------------------+-----------+----------+---------+-------------+-------+--------------+--------+---------------------+
| id                     | name             | category         | city      | day_week | weekend | schedule    | stars | review_count | stars  | date_review         |
+------------------------+------------------+------------------+-----------+----------+---------+-------------+-------+--------------+--------+---------------------+
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Shopping         | Cleveland | Sun      |       1 | 10:00-16:00 |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Shopping         | Cleveland | Fri      |       0 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Shopping         | Cleveland | Wed      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Shopping         | Cleveland | Mon      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Shopping         | Cleveland | Sat      |       1 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Food             | Cleveland | Sun      |       1 | 10:00-16:00 |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Food             | Cleveland | Fri      |       0 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Food             | Cleveland | Wed      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Food             | Cleveland | Mon      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Food             | Cleveland | Sat      |       1 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Seafood Markets  | Cleveland | Sun      |       1 | 10:00-16:00 |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Seafood Markets  | Cleveland | Fri      |       0 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Seafood Markets  | Cleveland | Wed      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Seafood Markets  | Cleveland | Mon      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Seafood Markets  | Cleveland | Sat      |       1 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Fruits & Veggies | Cleveland | Sun      |       1 | 10:00-16:00 |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Fruits & Veggies | Cleveland | Fri      |       0 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Fruits & Veggies | Cleveland | Wed      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Fruits & Veggies | Cleveland | Mon      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Fruits & Veggies | Cleveland | Sat      |       1 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Ethnic Food      | Cleveland | Sun      |       1 | 10:00-16:00 |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Ethnic Food      | Cleveland | Fri      |       0 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Ethnic Food      | Cleveland | Wed      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Ethnic Food      | Cleveland | Mon      |       0 | 7:00-16:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
| -Eu04UHRqmGGyvYRDY8-tg | West Side Market | Ethnic Food      | Cleveland | Sat      |       1 | 7:00-18:00  |   4.5 |          723 |      5 | 2017-03-10 00:00:00 |
+------------------------+------------------+------------------+-----------+----------+---------+-------------+-------+--------------+--------+---------------------+
(Output limit exceeded, 25 of 381 total rows shown)         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT b.id
    ,b.name
    ,c.category
    ,b.city
    ,SUBSTR(h.hours,1,3) AS day_week
    ,CASE
        WHEN SUBSTR(h.hours,1,3) IN ('Mon','Tue','Wed','Thu','Fri') THEN 0
        WHEN SUBSTR(h.hours,1,3) IN ('Sat','Sun') THEN 1
    END weekend
    ,replace(SUBSTR(h.hours,-11),"|","")AS schedule
    ,b.stars
    ,b.review_count
    ,r.stars
    ,r.date as date_review
FROM business b
LEFT JOIN review r
    ON b.id = r.business_id
LEFT JOIN category c
    ON c.business_id = b.id
LEFT JOIN hours h
    ON h.business_id = b.id
WHERE c.category is not null
    AND r.stars is not null
    AND h.hours is not null